<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" backgroundColor="0xc3a584"
					   xmlns:s="library://ns.adobe.com/flex/spark" chromeColor="0x440000"
					   creationComplete="onComplete(event)">
	
	
	<fx:Script>
		<![CDATA[
			import flash.desktop.NativeProcess;
			import flash.desktop.NativeProcessStartupInfo;
			import flash.events.IOErrorEvent;
			import flash.events.NativeProcessExitEvent;
			import flash.events.ProgressEvent;
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			
			[Bindable] public var sourceDirectory:File = new File();
			[Bindable] public var destinationDirectory:File = new File();
			[Bindable] public var fileOut:String = "";
			
			private var ffmpeg:NativeProcess;
			private var ffmpegInfo:NativeProcessStartupInfo;
			private var videoArray:ArrayCollection;
			
			
			
			
			protected function onComplete(event:FlexEvent):void
			{
				
				sourceDirectory = File.desktopDirectory;
                sourceLabel.text = sourceDirectory.nativePath;
				destinationDirectory = File.desktopDirectory;
                destinationLabel.text = destinationDirectory.nativePath;
				
				ffmpeg = new NativeProcess();
				ffmpegInfo = new NativeProcessStartupInfo();
				
				var bin:File = File.applicationDirectory;
				bin = bin.resolvePath("bin/ffmpeg.exe");
				ffmpegInfo.executable = bin;
				
				ffmpeg.addEventListener(NativeProcessExitEvent.EXIT, onExit);
				ffmpeg.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
				ffmpeg.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
				ffmpeg.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
				ffmpeg.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
			}
			
			
			protected function gatherVideos(event:MouseEvent):void {
				var tempArray:Array = new Array();
				videoArray = new ArrayCollection();
				tempArray = sourceDirectory.getDirectoryListing();
				for(var i:int = 0; i<tempArray.length; i++){
					videoArray.addItem(tempArray[i]);
				}
				fileOut = videoArray.length + "files left...";
				runFFMPEG();
			}
				
				
			
			private function runFFMPEG():void {
                log.text = "";
                var rawArgs:String = "-y -metadata:s:v rotate='0' -movflags +faststart -loglevel warning -c:v libx264 -profile:v main -level 3.1 -preset veryfast -crf 24 -vsync 1 -r 24 -pix_fmt yuvj420p -c:a libfdk_aac -cutoff 18000 -ar 44100 -b:a 192k -vf scale='trunc(oh*a/2)*2':'min(480\,ih)' ";
				var f:Object = videoArray.getItemAt(0);
				var processArgs:Vector.<String> = new Vector.<String>();
				var n:String = f.name;
				var b:int = n.indexOf(".");
				var d:String = destinationDirectory.nativePath + "/" + n.substr(0, b) + ".mp4";

                processArgs.push("-i");
                processArgs.push(f.nativePath);
                var argArray:Array = rawArgs.split(" ");
                for(var j:int = 0; j<argArray.length; j++){
                    processArgs.push(argArray[j]);
                }
                processArgs.push(d);

				videoArray.removeItemAt(0);
				fileOut = videoArray.length + " files left... [" + f.name + "]";
				ffmpegInfo.arguments = processArgs;
				ffmpeg.start(ffmpegInfo);
			}
			
			
			
			
			public function onOutputData(e:ProgressEvent):void {
                log.appendText("Got: " + ffmpeg.standardOutput.readUTFBytes(ffmpeg.standardOutput.bytesAvailable));
			}
			
			public function onErrorData(e:ProgressEvent):void {
                log.appendText("ERROR -" + ffmpeg.standardError.readUTFBytes(ffmpeg.standardError.bytesAvailable));
			}
			
			public function onExit(e:NativeProcessExitEvent):void {
                log.appendText("Process exited with " + e.exitCode);
				if(videoArray.length > 0){
					runFFMPEG();
				}
			}
			
			public function onIOError(e:IOErrorEvent):void {
                log.appendText(ffmpeg.toString());
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			protected function onSourceButtonClick(event:MouseEvent):void
			{
				sourceDirectory.addEventListener(Event.SELECT, onSourceSelected);
				sourceDirectory.browseForDirectory("Choose a directory to read files from...");
			}
			
			protected function onSourceSelected(event:Event):void
			{
				sourceDirectory.removeEventListener(Event.SELECT, onSourceSelected);
				sourceLabel.text = sourceDirectory.nativePath;
			}
			
			
			protected function onDestinationButtonClick(event:MouseEvent):void
			{
				destinationDirectory.addEventListener(Event.SELECT, onDestinationSelected);
				destinationDirectory.browseForDirectory("Choose a directory to write files to...");
			}
			
			protected function onDestinationSelected(event:Event):void
			{
				destinationDirectory.removeEventListener(Event.SELECT, onDestinationSelected);
				destinationLabel.text = destinationDirectory.nativePath;
			}
			
			
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="10" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
		</s:layout>
		
		<s:Button label="Choose Source Directory" click="onSourceButtonClick(event)" skinClass="flatspark.skins.ButtonSkin"/>
        <s:Label id="sourceLabel" />
        <s:Button label="Choose Destination Directory" click="onDestinationButtonClick(event)" skinClass="flatspark.skins.ButtonSkin"/>
		<s:Label id="destinationLabel" />
		
		<s:Button label="RUN" click="gatherVideos(event)" skinClass="flatspark.skins.ButtonSkin"/>
		
		<s:Label text="{fileOut}"/>
        <s:TextArea contentBackgroundColor="0x191919" color="0xfaebd7" focusColor="0x8b0000" width="100%"
                    height="100%" id="log"></s:TextArea>
		
	</s:Group>
	
	
</s:WindowedApplication>
